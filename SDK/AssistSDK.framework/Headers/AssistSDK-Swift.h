// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AssistSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AssistFeatures, closed) {
  AssistFeaturesAllowSession = 1,
  AssistFeaturesChat = 2,
  AssistFeaturesClipBoard = 3,
  AssistFeaturesUac = 4,
  AssistFeaturesMultimonitor = 5,
  AssistFeaturesCtrlAltDel = 6,
  AssistFeaturesPowerOptions = 7,
  AssistFeaturesFileTransfer = 8,
  AssistFeaturesInviteTechnician = 9,
  AssistFeaturesTwoWayScreenShare = 10,
  AssistFeaturesCaptureScreen = 11,
  AssistFeaturesGroupComputer = 12,
  AssistFeaturesSearchShort = 13,
  AssistFeaturesComputerStatus = 14,
  AssistFeaturesRequestControl = 15,
  AssistFeaturesFreeLicense = 16,
};


SWIFT_CLASS("_TtC9AssistSDK13AssistSession")
@interface AssistSession : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum SocketDisconnectStatus : NSInteger;
enum ScreenQuality : NSInteger;
enum SwitchRollStatus : NSInteger;
@class NSArray;

SWIFT_PROTOCOL("_TtP9AssistSDK21AssistSessionCallBack_")
@protocol AssistSessionCallBack
@optional
/// If sesion is disconnected this method will notify you.
/// \param state SocketDisconnectStatus is an enum and it will returns
/// reason for the disconnection.
///
- (void)didSessionWithDisconnected:(enum SocketDisconnectStatus)state;
/// When assist session is completely connected this method will notify you.
- (void)didSessionConnected;
/// We can change the image quality in ZohoAssist viewer.
/// Whenever the image quality is changed, it will notify you.
/// \param quality image quality
///
- (void)didChangeImageWithQuality:(enum ScreenQuality)quality;
/// Whenever the viewer joins the session,
/// this method will notify you.
/// \param id Connected viewer id
///
/// \param viewer Connected viewer name
///
/// \param type Viewer device type
///
- (void)joinedSessionWithViewer:(NSString * _Nonnull)id name:(NSString * _Nonnull)viewer viewer:(NSString * _Nonnull)type;
/// Whenever the viewer leaves this session,
/// this method will notify you.
/// \param id viewer id
///
- (void)leftSessionWithViewer:(NSString * _Nonnull)id;
/// Whenever the viewer has lost session connection this method will notify you.
/// \param id viewer id
///
- (void)connectionLostWithViewer:(NSString * _Nonnull)id;
/// Whenever chat message recevied from technician this method will notify you.
/// \param chat Chat message
///
/// \param viewerid Viewer ID
///
- (void)didReceivedWithChat:(NSString * _Nonnull)chat from:(NSString * _Nonnull)viewerid;
/// After the switch roll initiated this delegate will give update you status
/// \param status Respond from gateway with Status
///
- (void)switchRollWithStatus:(enum SwitchRollStatus)status;
/// Called before free session end
- (void)willEndFreeSession SWIFT_DEPRECATED_MSG("This method will be removed in upcoming updates");
/// Return all available features
- (void)onFeaturesReceived:(NSArray * _Nonnull)features;
@end

/// This enum help in choosing the server setup.
/// <ul>
///   <li>
///     low   : 25% quality
///   </li>
///   <li>
///     good  : 50% quality
///   </li>
///   <li>
///     best  : 75% quality
///   </li>
///   <li>
///     full  : 100% quality
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ScreenQuality, closed) {
  ScreenQualityLow = 1,
  ScreenQualityGood = 2,
  ScreenQualityBest = 3,
  ScreenQualityFull = 4,
};

/// This enum will give you the disconnection status of the socket/session
/// <ul>
///   <li>
///     unknown: Some unknow disconnection has been occured
///   </li>
///   <li>
///     diffcon: Disconneted due to gateway switching it will be reconnected automatically
///   </li>
///   <li>
///     invalidkey: Disconnected due to invalide key
///   </li>
///   <li>
///     switchgw: Disconneted due to gateway switching it will be reconnected automatically
///   </li>
///   <li>
///     customerended: Customer has end the session
///   </li>
///   <li>
///     technicianended: Technician has end the session
///   </li>
///   <li>
///     internetlost: Disconnected due to internet lost
///   </li>
///   <li>
///     duplicateClient: Duplicate agent connection.
///   </li>
///   <li>
///     switchroll: Switch roll succeed so that session disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SocketDisconnectStatus, closed) {
  SocketDisconnectStatusUnknown = 0,
  SocketDisconnectStatusDiffcon = 1,
  SocketDisconnectStatusInvalidkey = 2,
  SocketDisconnectStatusSwitchgw = 3,
  SocketDisconnectStatusCustomerended = 4,
  SocketDisconnectStatusTechnicianended = 5,
  SocketDisconnectStatusInternetlost = 6,
  SocketDisconnectStatusDuplicateClient = 7,
  SocketDisconnectStatusSwitchRoll = 8,
};

/// This enum helps to know the switch roll status
/// <ul>
///   <li>
///     unknown: unknow status
///   </li>
///   <li>
///     accepted: If technician accepts switch roll
///   </li>
///   <li>
///     gwreject: If gateway rejected due to invalid platform
///   </li>
///   <li>
///     userReject: If technician rejected
///   </li>
///   <li>
///     timeout: If request timeout
///   </li>
///   <li>
///     technicianRequested: If technician requested for screen sharing. Once you get the result from the user pass BOOL value to <code>switchRoll(accepted:)</code> method
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SwitchRollStatus, closed) {
  SwitchRollStatusUnknown = 0,
  SwitchRollStatusAccepted = 1,
  SwitchRollStatusGwreject = 2,
  SwitchRollStatusUserReject = 3,
  SwitchRollStatusTimeout = 4,
  SwitchRollStatusTechnicianRequested = 5,
};







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
