// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AssistSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AssistSDK
import CommonCrypto
import CoreFoundation
import CoreGraphics
import CoreMedia
import Foundation
import Photos
import ReplayKit.RPBroadcast
import ReplayKit
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var isIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isHighResIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
@objc public class AssistSession : ObjectiveC.NSObject {
  public var isNetworkAvailable: Swift.Bool {
    get
    set
  }
  public var features: [AssistSDK.AssistFeatures] {
    get
  }
  required public init?(delegate: (any AssistSDK.AssistSessionCallBack)? = nil, appGroup identifier: Swift.String, image quality: AssistSDK.ScreenQuality = .good)
  public func stopSession()
  public func resumeSession()
  public func endSession()
  public func addImage(buffer: CoreMedia.CMSampleBuffer)
  public func send(chat message: Swift.String)
  public class func register(session id: Swift.String, token encapi: Swift.String, appGroup identifier: Swift.String, client_name: Swift.String = "Guest", completion: @escaping (AssistSDK.SessionValidation) -> Swift.Void)
  public class func resetSessionInfo()
  public func requestSwitchRoll(withViewer id: Swift.String)
  public func switchRoll(accepted: Swift.Bool)
  @objc deinit
}
@objc public protocol AssistSessionCallBack {
  @objc optional func didSession(disconnected state: AssistSDK.SocketDisconnectStatus)
  @objc optional func didSessionConnected()
  @objc optional func didChangeImage(quality: AssistSDK.ScreenQuality)
  @objc optional func joinedSession(viewer id: Swift.String, name viewer: Swift.String, viewer type: Swift.String)
  @objc optional func leftSession(viewer id: Swift.String)
  @objc optional func connectionLost(viewer id: Swift.String)
  @objc optional func didReceived(chat: Swift.String, from viewerid: Swift.String)
  @objc optional func switchRoll(status: AssistSDK.SwitchRollStatus)
  @available(*, deprecated, message: "This method will be removed in upcoming updates")
  @objc optional func willEndFreeSession()
  @objc optional func onFeaturesReceived(_ features: Foundation.NSArray)
}
public enum AssistSessionMode : Swift.String, Swift.Codable {
  case access
  case support
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum AssistFeatures : Swift.Int {
  case allowSession = 1
  case chat
  case clipBoard
  case uac
  case multimonitor
  case ctrlAltDel
  case powerOptions
  case fileTransfer
  case inviteTechnician
  case twoWayScreenShare
  case captureScreen
  case groupComputer
  case searchShort
  case computerStatus
  case requestControl
  case freeLicense
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ScreenQuality : Swift.Int {
  case low = 1, good, best, full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SwitchRollStatus : Swift.Int {
  case unknown = 0, accepted, gwreject, userReject, timeout, technicianRequested
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SocketDisconnectStatus : Swift.Int {
  case unknown = 0, diffcon, invalidkey, switchgw, customerended, technicianended, internetlost, duplicateClient, switchRoll
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SessionValidation {
  case success
  case failure((any Swift.Error)?)
  public enum FailureState : Swift.Error {
    case paramMissing, invalidKey, sessionKeyExpired, authenticationFailed, featureNotAvailable, notAllowed, internalError, invalidLicenseKey
    public static func == (a: AssistSDK.SessionValidation.FailureState, b: AssistSDK.SessionValidation.FailureState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class RemoteSupportSessionData : Swift.Codable {
  public var customerEmail: Swift.String?
  public var representation: AssistSDK.RemoteSupportSessionData.Representation?
  public var error: AssistSDK.APIErrorResponse?
  public var session_token: Swift.String? {
    get
  }
  public var client_token: Swift.String? {
    get
  }
  public struct Representation : Swift.Codable {
    public var session_details: AssistSDK.RemoteSupportSessionData.Representation.SessionDetails? {
      get
    }
    public let gateway_details: AssistSDK.RemoteSupportSessionData.Representation.GatewayDetails?
    public let client_details: AssistSDK.RemoteSupportSessionData.Representation.ClientDetails?
    public struct SessionDetails : Swift.Codable {
      public let session_key: Swift.String?
      public var session_token: Swift.String? {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public class GatewayDetails : Swift.Codable {
      final public let web_socket_path: Swift.String?
      final public let group: Swift.String?
      final public let file_transfer_gateways: [Swift.String]?
      public var gateway_servers: [Swift.String]? {
        get
      }
      public var gateway_server: Foundation.URL? {
        get
      }
      public var gateway_url: Foundation.URL? {
        get
      }
      @objc deinit
      public func encode(to encoder: any Swift.Encoder) throws
      required public init(from decoder: any Swift.Decoder) throws
    }
    public struct ClientDetails : Swift.Codable {
      public let client_id: Swift.String?
      public let client_role: Swift.Int?
      public let client_token: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func set_gw_name(host: Swift.String)
    public func encode() throws -> Foundation.Data?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func set_token(_ token: Swift.String)
  public static func decodeSessionConfig(data: Foundation.Data) -> Swift.Result<AssistSDK.RemoteSupportSessionData, any Swift.Error>
  public func encodeSessionConfig() -> Foundation.Data?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum APIErrorType {
  case invalidDigest
  case maxURSLimitReached
  case freeUserLimitation
  case licenseLimitation
  case unknown
  public static func == (a: AssistSDK.APIErrorType, b: AssistSDK.APIErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct APIErrorResponse : Swift.Codable, Swift.Error {
  public var code: Swift.Int? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var parameter_name: Swift.String? {
    get
  }
  public var errorType: AssistSDK.APIErrorType {
    get
  }
  public var errorDesc: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension AssistSDK.ScreenQuality : Swift.Equatable {}
extension AssistSDK.ScreenQuality : Swift.Hashable {}
extension AssistSDK.ScreenQuality : Swift.RawRepresentable {}
extension AssistSDK.AssistSessionMode : Swift.Equatable {}
extension AssistSDK.AssistSessionMode : Swift.Hashable {}
extension AssistSDK.AssistSessionMode : Swift.RawRepresentable {}
extension AssistSDK.AssistFeatures : Swift.Equatable {}
extension AssistSDK.AssistFeatures : Swift.Hashable {}
extension AssistSDK.AssistFeatures : Swift.RawRepresentable {}
extension AssistSDK.SwitchRollStatus : Swift.Equatable {}
extension AssistSDK.SwitchRollStatus : Swift.Hashable {}
extension AssistSDK.SwitchRollStatus : Swift.RawRepresentable {}
extension AssistSDK.SocketDisconnectStatus : Swift.Equatable {}
extension AssistSDK.SocketDisconnectStatus : Swift.Hashable {}
extension AssistSDK.SocketDisconnectStatus : Swift.RawRepresentable {}
extension AssistSDK.SessionValidation.FailureState : Swift.Equatable {}
extension AssistSDK.SessionValidation.FailureState : Swift.Hashable {}
extension AssistSDK.APIErrorType : Swift.Equatable {}
extension AssistSDK.APIErrorType : Swift.Hashable {}
